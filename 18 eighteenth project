// UPEx18.cpp : Defines the entry point for the console application.
//this program convert hexadecimal(string) in decimal(int)

#include "stdafx.h"
#include <iostream>
#include <string>
#include <cmath>

using namespace std;


int main()
{
	string hexnum;
	cout << "Enter hexadecimal: ";
	cin >> hexnum;
	int er = 0;//an integer that will indicate for error
	for (int  i = 0; i < hexnum.length(); i++)
	{
		if ((hexnum[i] >= '0'&&hexnum[i] <= '9') || (hexnum[i] >= 'a'&&hexnum[i] <= 'f') || (hexnum[i] >= 'A' &&hexnum[i] <= 'F'))
		{
			;
		}
		else
		{
			cout << endl << "ERROR Enter HEXADECIMAL! " << endl;
			er = 1;
			break;
		}
	}
	if (0 == er)
	{
		int dec = 0;//the hexadecimal converted in decimal
		for (int i = 0; i < hexnum.length(); i++)
		{
			switch (hexnum[i])
			{
			case '0': dec += 0; break;
			case '1': dec += 1 * pow(16, hexnum.length() - 1 - i); break;
			case '2': dec += 2 * pow(16, hexnum.length() - 1 - i); break;
			case '3': dec += 3 * pow(16, hexnum.length() - 1 - i); break;
			case '4': dec += 4 * pow(16, hexnum.length() - 1 - i); break;
			case '5': dec += 5 * pow(16, hexnum.length() - 1 - i); break;
			case '6': dec += 6 * pow(16, hexnum.length() - 1 - i); break;
			case '7': dec += 7 * pow(16, hexnum.length() - 1 - i); break;
			case '8': dec += 8 * pow(16, hexnum.length() - 1 - i); break;
			case '9': dec += 9 * pow(16, hexnum.length() - 1 - i); break;
			case 'a':
			case 'A': dec += 10 * pow(16, hexnum.length() - 1 - i); break;
			case 'b':
			case 'B': dec += 11 * pow(16, hexnum.length() - 1 - i); break;
			case 'c':
			case 'C': dec += 12 * pow(16, hexnum.length() - 1 - i); break;
			case 'd':
			case 'D': dec += 13 * pow(16, hexnum.length() - 1 - i); break;
			case 'e':
			case 'E': dec += 14 * pow(16, hexnum.length() - 1 - i); break;
			case 'f':
			case 'F': dec += 15 * pow(16, hexnum.length() - 1 - i); break;
			default: cout << endl << "ERROR" << endl;
			}
		}
		cout << endl << "Your hexadecimal " << hexnum << " in decimal is " << dec << endl;
	}
	else
	{
		return 1;
	}
	return 0;
}
